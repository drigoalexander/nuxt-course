{
  "resolvedId": "/Users/drigoalexander/Documents/Practice/NUXT/nuxt-course/node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     * @returns newly created bucket id\n     */\n    createBucket(id, options = {\n        public: false,\n    }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     */\n    updateBucket(id, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=StorageBucketApi.js.map",
      "start": 1703362405294,
      "end": 1703362405313,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703362405313,
      "end": 1703362405313,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703362405313,
      "end": 1703362405316,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "post"
    },
    {
      "name": "nuxt:pure-annotations",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703362405316,
      "end": 1703362405316,
      "order": "normal"
    }
  ]
}
