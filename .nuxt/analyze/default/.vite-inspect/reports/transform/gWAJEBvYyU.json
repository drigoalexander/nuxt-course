{
  "resolvedId": "/Users/drigoalexander/Documents/Practice/NUXT/nuxt-course/node_modules/@supabase/gotrue-js/dist/module/lib/locks.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { supportsLocalStorage } from './helpers';\n/**\n * @experimental\n */\nexport const internals = {\n    /**\n     * @experimental\n     */\n    debug: !!(globalThis &&\n        supportsLocalStorage() &&\n        globalThis.localStorage &&\n        globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'),\n};\nexport class LockAcquireTimeoutError extends Error {\n    constructor(message) {\n        super(message);\n        this.isAcquireTimeout = true;\n    }\n}\nexport class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {\n}\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock(name, acquireTimeout, fn) {\n    if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n    }\n    const abortController = new globalThis.AbortController();\n    if (acquireTimeout > 0) {\n        setTimeout(() => {\n            abortController.abort();\n            if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n            }\n        }, acquireTimeout);\n    }\n    // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\n    return await globalThis.navigator.locks.request(name, acquireTimeout === 0\n        ? {\n            mode: 'exclusive',\n            ifAvailable: true,\n        }\n        : {\n            mode: 'exclusive',\n            signal: abortController.signal,\n        }, async (lock) => {\n        if (lock) {\n            if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name);\n            }\n            try {\n                return await fn();\n            }\n            finally {\n                if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name);\n                }\n            }\n        }\n        else {\n            if (acquireTimeout === 0) {\n                if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name);\n                }\n                throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`);\n            }\n            else {\n                if (internals.debug) {\n                    try {\n                        const result = await globalThis.navigator.locks.query();\n                        console.log('@supabase/gotrue-js: Navigator LockManager state', JSON.stringify(result, null, '  '));\n                    }\n                    catch (e) {\n                        console.warn('@supabase/gotrue-js: Error when querying Navigator LockManager state', e);\n                    }\n                }\n                // Browser is not following the Navigator LockManager spec, it\n                // returned a null lock when we didn't use ifAvailable. So we can\n                // pretend the lock is acquired in the name of backward compatibility\n                // and user experience and just run the function.\n                console.warn('@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request');\n                return await fn();\n            }\n        }\n    });\n}\n//# sourceMappingURL=locks.js.map",
      "start": 1703362405083,
      "end": 1703362405163,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703362405163,
      "end": 1703362405163,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703362405163,
      "end": 1703362405163,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703362405163,
      "end": 1703362405163,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703362405163,
      "end": 1703362405163,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "post"
    },
    {
      "name": "nuxt:pure-annotations",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703362405164,
      "end": 1703362405164,
      "order": "normal"
    }
  ]
}
