{
  "resolvedId": "/Users/drigoalexander/Documents/Practice/NUXT/nuxt-course/node_modules/@supabase/functions-js/dist/module/FunctionsClient.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { resolveFetch } from './helper';\nimport { FunctionsFetchError, FunctionsHttpError, FunctionsRelayError, } from './types';\nexport class FunctionsClient {\n    constructor(url, { headers = {}, customFetch, } = {}) {\n        this.url = url;\n        this.headers = headers;\n        this.fetch = resolveFetch(customFetch);\n    }\n    /**\n     * Updates the authorization header\n     * @param token - the new jwt token sent in the authorisation header\n     */\n    setAuth(token) {\n        this.headers.Authorization = `Bearer ${token}`;\n    }\n    /**\n     * Invokes a function\n     * @param functionName - The name of the Function to invoke.\n     * @param options - Options for invoking the Function.\n     */\n    invoke(functionName, options = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { headers, method, body: functionArgs } = options;\n                let _headers = {};\n                let body;\n                if (functionArgs &&\n                    ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)) {\n                    if ((typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\n                        functionArgs instanceof ArrayBuffer) {\n                        // will work for File as File inherits Blob\n                        // also works for ArrayBuffer as it is the same underlying structure as a Blob\n                        _headers['Content-Type'] = 'application/octet-stream';\n                        body = functionArgs;\n                    }\n                    else if (typeof functionArgs === 'string') {\n                        // plain string\n                        _headers['Content-Type'] = 'text/plain';\n                        body = functionArgs;\n                    }\n                    else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n                        // don't set content-type headers\n                        // Request will automatically add the right boundary value\n                        body = functionArgs;\n                    }\n                    else {\n                        // default, assume this is JSON\n                        _headers['Content-Type'] = 'application/json';\n                        body = JSON.stringify(functionArgs);\n                    }\n                }\n                const response = yield this.fetch(`${this.url}/${functionName}`, {\n                    method: method || 'POST',\n                    // headers priority is (high to low):\n                    // 1. invoke-level headers\n                    // 2. client-level headers\n                    // 3. default Content-Type header\n                    headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),\n                    body,\n                }).catch((fetchError) => {\n                    throw new FunctionsFetchError(fetchError);\n                });\n                const isRelayError = response.headers.get('x-relay-error');\n                if (isRelayError && isRelayError === 'true') {\n                    throw new FunctionsRelayError(response);\n                }\n                if (!response.ok) {\n                    throw new FunctionsHttpError(response);\n                }\n                let responseType = ((_a = response.headers.get('Content-Type')) !== null && _a !== void 0 ? _a : 'text/plain').split(';')[0].trim();\n                let data;\n                if (responseType === 'application/json') {\n                    data = yield response.json();\n                }\n                else if (responseType === 'application/octet-stream') {\n                    data = yield response.blob();\n                }\n                else if (responseType === 'multipart/form-data') {\n                    data = yield response.formData();\n                }\n                else {\n                    // default to text\n                    data = yield response.text();\n                }\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n}\n//# sourceMappingURL=FunctionsClient.js.map",
      "start": 1703362405085,
      "end": 1703362405165,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703362405165,
      "end": 1703362405165,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703362405165,
      "end": 1703362405166,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "post"
    },
    {
      "name": "nuxt:pure-annotations",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703362405166,
      "end": 1703362405166,
      "order": "normal"
    }
  ]
}
