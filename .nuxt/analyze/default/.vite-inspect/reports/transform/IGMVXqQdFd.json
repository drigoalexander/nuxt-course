{
  "resolvedId": "/Users/drigoalexander/Documents/Practice/NUXT/nuxt-course/node_modules/@supabase/postgrest-js/dist/module/PostgrestBuilder.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// @ts-ignore\nimport nodeFetch from '@supabase/node-fetch';\nexport default class PostgrestBuilder {\n    constructor(builder) {\n        this.shouldThrowOnError = false;\n        this.method = builder.method;\n        this.url = builder.url;\n        this.headers = builder.headers;\n        this.schema = builder.schema;\n        this.body = builder.body;\n        this.shouldThrowOnError = builder.shouldThrowOnError;\n        this.signal = builder.signal;\n        this.isMaybeSingle = builder.isMaybeSingle;\n        if (builder.fetch) {\n            this.fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            this.fetch = nodeFetch;\n        }\n        else {\n            this.fetch = fetch;\n        }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        const _fetch = this.fetch;\n        let res = _fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then(async (res) => {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                if (this.method !== 'HEAD') {\n                    const body = await res.text();\n                    if (body === '') {\n                        // Prefer: return=minimal\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = body;\n                    }\n                    else if (this.headers['Accept'] &&\n                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                        data = body;\n                    }\n                    else {\n                        data = JSON.parse(body);\n                    }\n                }\n                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n                // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n                // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n                if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n                    if (data.length > 1) {\n                        error = {\n                            // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                            code: 'PGRST116',\n                            details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n                            hint: null,\n                            message: 'JSON object requested, multiple (or no) rows returned',\n                        };\n                        data = null;\n                        count = null;\n                        status = 406;\n                        statusText = 'Not Acceptable';\n                    }\n                    else if (data.length === 1) {\n                        data = data[0];\n                    }\n                    else {\n                        data = null;\n                    }\n                }\n            }\n            else {\n                const body = await res.text();\n                try {\n                    error = JSON.parse(body);\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (Array.isArray(error) && res.status === 404) {\n                        data = [];\n                        error = null;\n                        status = 200;\n                        statusText = 'OK';\n                    }\n                }\n                catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && body === '') {\n                        status = 204;\n                        statusText = 'No Content';\n                    }\n                    else {\n                        error = {\n                            message: body,\n                        };\n                    }\n                }\n                if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw error;\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n            };\n            return postgrestResponse;\n        });\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => {\n                var _a, _b, _c;\n                return ({\n                    error: {\n                        message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n                        details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n                        hint: '',\n                        code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`,\n                    },\n                    data: null,\n                    count: null,\n                    status: 0,\n                    statusText: '',\n                });\n            });\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\n//# sourceMappingURL=PostgrestBuilder.js.map",
      "start": 1703362405224,
      "end": 1703362405252,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "post"
    },
    {
      "name": "nuxt:pure-annotations",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703362405252,
      "end": 1703362405252,
      "order": "normal"
    }
  ]
}
