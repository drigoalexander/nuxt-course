{
  "resolvedId": "/Users/drigoalexander/Documents/Practice/NUXT/nuxt-course/node_modules/@supabase/functions-js/node_modules/@supabase/node-fetch/browser.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n",
      "start": 1703362405295,
      "end": 1703362405377,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703362405377,
      "end": 1703362405377,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703362405377,
      "end": 1703362405378,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405378,
      "end": 1703362405378,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703362405378,
      "end": 1703362405378,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703362405378,
      "end": 1703362405378,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703362405378,
      "end": 1703362405378,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703362405378,
      "end": 1703362405378,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703362405378,
      "end": 1703362405378,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703362405378,
      "end": 1703362405378,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as browserModule } from \"\\u0000/Users/drigoalexander/Documents/Practice/NUXT/nuxt-course/node_modules/@supabase/functions-js/node_modules/@supabase/node-fetch/browser.js?commonjs-module\";\nvar browser = browserModule.exports;\n\n(function (module, exports) {\n\t\"use strict\";\n\n\t// ref: https://github.com/tc39/proposal-global\n\tvar getGlobal = function () {\n\t\t// the only reliable means to get the global object is\n\t\t// `Function('return this')()`\n\t\t// However, this causes CSP violations in Chrome apps.\n\t\tif (typeof self !== 'undefined') { return self; }\n\t\tif (typeof window !== 'undefined') { return window; }\n\t\tif (typeof commonjsHelpers.commonjsGlobal !== 'undefined') { return commonjsHelpers.commonjsGlobal; }\n\t\tthrow new Error('unable to locate global object');\n\t}\n\n\tvar globalObject = getGlobal();\n\n\tmodule.exports = exports = globalObject.fetch;\n\n\t// Needed for TypeScript and Webpack.\n\tif (globalObject.fetch) {\n\t\texports.default = globalObject.fetch.bind(globalObject);\n\t}\n\n\texports.Headers = globalObject.Headers;\n\texports.Request = globalObject.Request;\n\texports.Response = globalObject.Response; \n} (browserModule, browserModule.exports));\n\nvar browserExports = browserModule.exports;\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(browserExports);\nexport { browserExports as __moduleExports };",
      "start": 1703362405378,
      "end": 1703362405381,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [
          "global"
        ],
        "mappings": ";;;;;CAAA,YAAY,CAAC;AACb;CACA;CACA,IAAI,SAAS,GAAG,YAAY;CAC5B;CACA;CACA;CACA,CAAC,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE,EAAE,OAAO,IAAI,CAAC,EAAE;CAClD,CAAC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,EAAE,OAAO,MAAM,CAAC,EAAE;CACtD,CAAC,IAAI,OAAOA,8BAAM,KAAK,WAAW,EAAE,EAAE,OAAOA,8BAAM,CAAC,EAAE;CACtD,CAAC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;CACnD,CAAC;AACD;CACA,IAAI,YAAY,GAAG,SAAS,EAAE,CAAC;AAC/B;CACA,iBAAiB,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC;AAC9C;CACA;CACA,IAAI,YAAY,CAAC,KAAK,EAAE;CACxB,CAAC,kBAAkB,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;CACzD,CAAC;AACD;CACA,kBAAkB,YAAY,CAAC,OAAO,CAAC;CACvC,kBAAkB,YAAY,CAAC,OAAO,CAAC;CACvC,mBAAmB,YAAY,CAAC,QAAQ"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "post"
    },
    {
      "name": "nuxt:pure-annotations",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703362405381,
      "end": 1703362405381,
      "order": "normal"
    }
  ]
}
