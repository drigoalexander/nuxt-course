{
  "resolvedId": "/Users/drigoalexander/Documents/Practice/NUXT/nuxt-course/node_modules/@supabase/postgrest-js/dist/module/PostgrestClient.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.schemaName = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        const url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder(url, {\n            headers: Object.assign({}, this.headers),\n            schema: this.schemaName,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return new PostgrestClient(this.url, {\n            headers: this.headers,\n            schema,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, { head = false, count, } = {}) {\n        let method;\n        const url = new URL(`${this.url}/rpc/${fn}`);\n        let body;\n        if (head) {\n            method = 'HEAD';\n            Object.entries(args).forEach(([name, value]) => {\n                url.searchParams.append(name, `${value}`);\n            });\n        }\n        else {\n            method = 'POST';\n            body = args;\n        }\n        const headers = Object.assign({}, this.headers);\n        if (count) {\n            headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder({\n            method,\n            url,\n            headers,\n            schema: this.schemaName,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\n//# sourceMappingURL=PostgrestClient.js.map",
      "start": 1703362405205,
      "end": 1703362405241,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "post"
    },
    {
      "name": "nuxt:pure-annotations",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703362405241,
      "end": 1703362405241,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703362405241,
      "end": 1703362405242,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703362405242,
      "end": 1703362405242,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703362405242,
      "end": 1703362405242,
      "order": "normal"
    }
  ]
}
