{
  "resolvedId": "/Users/drigoalexander/Documents/Practice/NUXT/nuxt-course/node_modules/@supabase/postgrest-js/dist/module/PostgrestTransformBuilder.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (this.headers['Prefer']) {\n            this.headers['Prefer'] += ',';\n        }\n        this.headers['Prefer'] += 'return=representation';\n        return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order referenced tables, but it only affects the ordering of the\n     * parent table if you use `!inner` in the query.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.referencedTable - Set this to order a referenced table by\n     * its columns\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = referencedTable ? `${referencedTable}.order` : 'order';\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    limit(count, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`).\n     * Only records within this range are returned.\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n     * and fourth rows of the query.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    range(from, to, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n        const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.method === 'GET') {\n            this.headers['Accept'] = 'application/json';\n        }\n        else {\n            this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        }\n        this.isMaybeSingle = true;\n        return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n        this.headers['Accept'] = 'application/geo+json';\n        return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {\n        var _a;\n        const options = [\n            analyze ? 'analyze' : null,\n            verbose ? 'verbose' : null,\n            settings ? 'settings' : null,\n            buffers ? 'buffers' : null,\n            wal ? 'wal' : null,\n        ]\n            .filter(Boolean)\n            .join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        const forMediatype = (_a = this.headers['Accept']) !== null && _a !== void 0 ? _a : 'application/json';\n        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n        if (format === 'json')\n            return this;\n        else\n            return this;\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n        var _a;\n        if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n            this.headers['Prefer'] += ',tx=rollback';\n        }\n        else {\n            this.headers['Prefer'] = 'tx=rollback';\n        }\n        return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     */\n    returns() {\n        return this;\n    }\n}\n//# sourceMappingURL=PostgrestTransformBuilder.js.map",
      "start": 1703362405221,
      "end": 1703362405250,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703362405250,
      "end": 1703362405250,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703362405250,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "post"
    },
    {
      "name": "nuxt:pure-annotations",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703362405251,
      "end": 1703362405251,
      "order": "normal"
    }
  ]
}
